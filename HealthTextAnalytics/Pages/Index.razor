@page "/"
@using HealthTextAnalytics.Models;
@using System.Text;
@using System.Text.Json;
@using System.Text.Json.Nodes;
@using System.Diagnostics;
@using HealthTextAnalytics.Util;
@using static HealthTextAnalytics.Util.HealthTextJsonUtil;
@inject IHttpClientFactory _httpClientFactory;

<h3>Azure HealthCare Text Analysis - Azure Cognitive Services</h3>

<EditForm Model="@Model" OnValidSubmit="@Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row">
        <label><strong>Text input</strong></label>
        <InputTextArea class="overflow-scroll" style="max-height:500px;font-size: 10pt;font-family:Verdana, Geneva, Tahoma, sans-serif" @bind-Value="@Model.InputText" rows="5" />
    </div>

    <div class="form-group row"> 
        <div class="col">
            <br />
            <button class="btn btn-outline-primary" type="submit">Run</button>
        </div>
        <div class="col">
        </div>
        <div class="col">
        </div>
    </div>

    <br />

    @if (isProcessing)
    {
        <div class="progress">
            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: 75%"></div>
        </div>
    }

    <div class="form-group row">
        <label><strong>Analysis result</strong></label>

        @if (isSearchPerformed)
        {
            <br />
            <b>Execution time took: @Model.ExecutionTime ms (milliseconds)</b><br />
            <br />

            <b>Categorized and analyzed Health Analysis of inputted text</b>
            @ms
            <br />
         
            <table class="table table-striped table-dark table-hover">
            <thead>
                <th>Category</th>
                <th>Text</th>
                <th>Name</th>
                <th>ConfidenceScore</th>
                <th>Offset</th>
                <th>Length</th>
                <th>Links</th>
            </thead>
            <tbody>
            @foreach (var entity in Model.EntititesInAnalyzedResult)
            {
                <tr>
                    <td>@entity.category</td>
                    <td>@entity.text</td>
                    <td>@entity.name</td>
                    <td>@entity.confidenceScore</td>
                    <td>@entity.offset</td>
                    <td>@entity.length</td>
                    <td>@string.Join(Environment.NewLine, (@entity.links ?? new List<Link>()).Select(l => l?.dataSource + " " + l?.id))</td>
                </tr>
                
            }
            </tbody>
            </table>

            <b>Health Analysis raw text from Azure service</b>
            <InputTextArea class="overflow-scroll" readonly="readonly" style="max-height:500px;font-size: 10pt;font-family:Verdana, Geneva, Tahoma, sans-serif" @bind-Value="@Model.AnalysisResult" rows="1000" />

        }
   </div>

</EditForm>


@code {

    private IndexModel Model = new();

    MarkupString ms = new();

    private bool isProcessing = false;

    private bool isSearchPerformed = false;

    protected override void OnParametersSet()
    {
        Model.InputText = @"A 12-year old girl with known hyperagglutinability, presented to the emergency department with a 2-week history 
of headeaches and examination right side indicated with conduction facial weakness Neurologic sensorineural hearing loss Weber's test
demonstrating on the right head revealed temporal bone lateralizing on the , and the Magnetic resonance imaging
severe structural defects indication of of the of the right petrous cerebral infarction";
    }

    //private TextAnalyticsClient CreateTextAnalyticsClient()
    //{
    //    string? uri = Environment.GetEnvironmentVariable("AZURE_COGNITIVE_SERVICES_LANGUAGE_SERVICE_ENDPOINT", EnvironmentVariableTarget.Machine);
    //    string? key = Environment.GetEnvironmentVariable("AZURE_COGNITIVE_SERVICES_LANGUAGE_SERVICE_KEY", EnvironmentVariableTarget.Machine);
    //    if (uri == null)
    //    {
    //        throw new ArgumentNullException(nameof(uri), "Could not get system environment variable named 'AZURE_COGNITIVE_SERVICE_ENDPOINT' Set this variable first.");
    //    }
    //    if (key == null)
    //    {
    //        throw new ArgumentNullException(nameof(uri), "Could not get system environment variable named 'AZURE_COGNITIVE_SERVICE_KEY' Set this variable first.");
    //    }
    //    var client = new TextAnalyticsClient(new Uri(uri!), new AzureKeyCredential(key!));

    //    return client;        
    //}

    private async Task Submit()
    {
        try
        {
            isProcessing = true;
            isSearchPerformed = false;
            ms = new MarkupString(string.Empty);
            Model.EntititesInAnalyzedResult.Clear();
            Model.AnalysisResult = string.Empty;

            var client = _httpClientFactory.CreateClient("Az");

            string requestBodyRaw = HealthTextAnalysisRequestFactory.CreateRequest(Model.InputText);

            string knownEndpointAnalyzeTextUrl = @"language/analyze-text/jobs?api-version=2023-04-01";

            //https://learn.microsoft.com/en-us/azure/ai-services/language-service/text-analytics-for-health/how-to/call-api?tabs=ner

            var stopWatch = Stopwatch.StartNew();

            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, knownEndpointAnalyzeTextUrl);
            request.Content = new StringContent(requestBodyRaw,
                                                Encoding.UTF8,
                                                "application/json");//CONTENT-TYPE header

            var response = await client.SendAsync(request);

            const int awaitTimeInMs = 500;

            var timer = new PeriodicTimer(TimeSpan.FromMilliseconds(awaitTimeInMs));

            const int maxTimerWait = 10000;
            int timeAwaited = 0;

            while (await timer.WaitForNextTickAsync())
            {
                if (response.IsSuccessStatusCode)
                {
                    isSearchPerformed = true;
                    var operationLocation = response.Headers.First(h => h.Key?.ToLower() == "operation-location").Value.FirstOrDefault();

                    var resultFromHealthAnalysis = await client.GetAsync(operationLocation);
                    JsonNode resultFromService = JsonSerializer.Deserialize<JsonNode>(await resultFromHealthAnalysis.Content.ReadAsStringAsync());
                    if (resultFromService["status"].GetValue<string>() == "succeeded")
                    {
                        Model.AnalysisResult = await resultFromHealthAnalysis.Content.ReadAsStringAsync();
                        Model.ExecutionTime = stopWatch.ElapsedMilliseconds;
                        break;
                    }

                }

                timeAwaited += 500;
                if (timeAwaited >= maxTimerWait)
                {
                    Model.AnalysisResult = $"ERR: Timeout. Operation to analyze input text using Azure HealthAnalytics language service timed out after waiting for {timeAwaited} ms.";
                    break;
                }
            }
            ms = new MarkupString(HealthTextJsonUtil.GetCategorizedInputText(Model.InputText, Model.AnalysisResult));
            
            Model.EntititesInAnalyzedResult.AddRange(HealthTextJsonUtil.GetEntities(Model.AnalysisResult));
        }
        catch (Exception err)
        {
            Console.WriteLine(err);
        }
        finally
        {
            isProcessing = false;
            isSearchPerformed = true;
            StateHasChanged();
        }

    }

    public static class HealthTextAnalysisRequestFactory
    {
        public static string CreateRequest(string inputText)
        {
            var request = new
            {
                analysisInput = new
                {
                    documents = new[]
                    {
                        new { text = inputText, id = "1", language = "en" }
                    }
                },
                tasks = new[]
                {
                    new { id = "analyze 1", kind = "Healthcare", parameters = new { fhirVersion = "4.0.1" } }
                }                
            };
            return System.Text.Json.JsonSerializer.Serialize(request, new JsonSerializerOptions { WriteIndented = true });
        }

    } 

}
